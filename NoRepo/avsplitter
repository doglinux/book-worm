#!/bin/bash
# 2024-07-28, fredx181, avsplitter , split a video file (or audio file) into 'chapters' using ffmpeg
export TEXTDOMAIN=avsplitter
export OUTPUT_CHARSET=UTF-8

split_chapters () {
if [ ! -f "$SOURCEFILE" ] || [ ! -f "$CHAPTERS" ] || [ ! -d "$DIR" ]; then
export E_DIALOG='
 <window title="Error">
 <vbox>
  <text>
  <label>"One or more entries are not correct, please try again..."</label>
     </text>
    <hbox>
      <button ok></button>
    </hbox>
 </vbox>
 </window>
'
gtkdialog --center --geometry=520x65 --program=E_DIALOG
exec "$0"
fi

    if [ "$TAGGING" = "true" ]; then
    tag
    fi

# run with output/progress
run_splitter () {
VIDFILE="$SOURCEFILE"
#DIR="$(dirname "${VIDFILE}")"
BASE=$(basename "${VIDFILE%.*}")
SUFFIX=$(echo "${VIDFILE##*\.}")	
CHAPTERLIST="$CHAPTERS"

  if [ "$ONLYAUDIO" = "true" ]; then  
# Check if the file contains video and audio
VIDCHK=$(ffmpeg -i "$VIDFILE" 2>&1 | grep "Audio:\|Video:")
if [ -n "$(echo "$VIDCHK" | grep 'Audio:')" ] && [ -n "$(echo "$VIDCHK" | grep 'Video:')" ]; then
AUDIO=yes
fi
  fi

# variable CHAPTERLIST, make it unix line endings, and more
CHAPTERLIST=$(tr -d '\r' < "$CHAPTERLIST" | sed '/^[ \t]*$/d;$a\' | grep '[0-9]')
#CHK=$(echo "$CHAPTERLIST" | awk '{print $NF}' | grep -Pv '^(?=.*:)(?=.*[0-9])')
CHK=$(echo "$CHAPTERLIST" | awk '{print $NF}' | grep -v ':\|[0-9]')
[ -z "$CHK" ] && CHAPTERLIST=$(echo "$CHAPTERLIST" | awk '{$0=$NF FS$0;$NF=""}1')

# create dir where the files are created, named after the source
mkdir -p "$DIR/${BASE}_chapters"

if [ "$OW" = "true" ]; then
ow="-y"
echo -e "XXX\nOverwriting files if existing...\nXXX"
sleep 3
fi

#set -x
# read chapter list
count=0
while read line;
do
if [ -n "$SHOWTIME" ]; then
CHAPTER=$(echo "$line" | sed "s|[*:/|@]|-|g;s/^-//;s/^ //")  # diplays <number> <time> <title>
else
CHAPTER="$(echo "${line}" | cut -d' ' -f 2- | sed "s|[*:/|@]|-|g;s/^-//;s/^ //")"  # only <number> <title>
fi

((count+=1))
   CNT="$(printf "%02d %s\n" "$count")"

START="$(echo "${line}" | cut -d " " -f 1)"
END=$(echo "$CHAPTERLIST" | cut -d " " -f 1 | grep -w "^${START}" -A 1 | tail -1)

STARTCHK="$(echo "${START}" | grep '[a-z]')"
ENDCHK="$(echo "${END}" | grep '[a-z]')"

# if no valuable endtime, try next
if [ -n "$ENDCHK" ]; then 
END=$(echo "$CHAPTERLIST" | cut -d " " -f 1 | grep -w "^${START}" -A 10000 | grep -v '[a-z]' | grep -m 2 '[0-9]' | tail -1)
fi

# in case a line accidentally contains no valuable starttime, skip it
if [ -n "$STARTCHK" ]; then
echo -e "XXX\nSkipping $line , no valuable start time\nXXX"
sleep 3 
((count-=1))
continue
fi

  if [ -z "$END" ] || [ "$END" = "$START" ]; then 
  END=1000000  # process until end of source video
  SRCEND=y
  fi

#echo -e "\e[0;36m$CNT\033[0m"
              if [ "$AUDIO" = "yes" ]; then
              SUFFIX=$(ffmpeg -nostdin -i "$VIDFILE" 2>&1 | grep -o "Audio: .*" | awk '{print $2}' | sed -e  's/,//g')
	      [ "$SUFFIX" = "aac" ] && SUFFIX=m4a
              [ "$SUFFIX" = "pcm_s16le" ] && SUFFIX=wav
              [ "$SUFFIX" = "vorbis" ] && SUFFIX=ogg
              fi
#echo -e "\e[0;32mProcessing $DIR/${BASE}_chapters/${CNT}- ${CHAPTER}.$SUFFIX . . .\033[0m"
#[ -n "$SRCEND" ] && SRCEND="$(basename "$VIDFILE") end" && echo -e "\e[0;32mStart = $START , End = $SRCEND\033[0m" || echo -e "\e[0;32mStart = $START , End = $END\033[0m"

echo "XXX"
echo "Processing  . . ."
echo "\\n"
echo "${CNT}- ${CHAPTER}.$SUFFIX"
echo "\\n"
[ -n "$SRCEND" ] && SRCEND="End of file" && echo "Start = $START , End = $SRCEND" || echo "Start = $START , End = $END"
echo "\\n"
echo "In directory:"
echo "\\n"
echo "$DIR/${BASE}_chapters"
echo "XXX"

[ -z "$ALBUM" ] && ALBUM="${BASE}"
[ -z "$ARTIST" ] && ARTIST="${BASE}"

# finally process by using ffmpeg
if [ "$AUDIO" = "yes" ]; then

ffmpeg -nostdin -loglevel error $ow -i "$VIDFILE" -ss "$START" -to "$END" -vn -acodec copy -metadata title="${CHAPTER}" -metadata artist="${ARTIST}" -metadata album="${ALBUM}" -metadata track="${CNT}" -id3v2_version 3 -write_id3v1 1 "$DIR/${BASE}_chapters/${CNT}- ${CHAPTER}"."$SUFFIX"

else
ffmpeg -nostdin -loglevel error $ow -i "$VIDFILE" -ss "$START" -to "$END" -vcodec copy -acodec copy -metadata title="${CHAPTER}" -metadata artist="${ARTIST}" -metadata album="${ALBUM}" -metadata track="${CNT}" -id3v2_version 3 -write_id3v1 1 "$DIR/${BASE}_chapters/${CNT}- ${CHAPTER}"."$SUFFIX"
fi 
if [ $? -ne 0 ]; then
#((count-=1))
  if [ "$OW" = "true" ]; then
((count-=1))
  else
echo "XXX"
echo "Skipping: ${line}"
echo "\\n"
echo "(no overwrite or other error from ffmpeg)"
echo "XXX"
sleep 3
  fi
fi

done <<<"$CHAPTERLIST"

echo -e "XXX\nDone!\nXXX"

sleep 3
}; export -f run_splitter

run_splitter | Xdialog --title "Splitting . . ." --infobox "Splitting . . ." 13 120 0
}
export -f split_chapters

help () {
echo -e '<window title="Help">
<vbox>
    <edit editable="false">
      <width>700</width><height>595</height>
      <default>
"avsplitter , split a video file (or audio file) into 'chapters' using ffmpeg
Select source video (or audio) and a 'chapter' list
The files will be extracted in new created directory named after the source
The chapterlist (textfile) needs to be created manually and must have the form of:
<starttime> <title> on every line e.g:
0:43 First title
2:25 Second title
3:51 Third title
5:34 Fourth title

Or <title> <starttime> (with time as last field) works too, e.g:
I Got Rhythm 0:00
Sicilian Blue 11:10
BQE 21:45
Berne, Baby, Berne 30:52
Pachelbels Canon 36:31
Choux a la Cr√®me 46:05

Or <starttime> in seconds, e.g:
30 First title
60 Second title
100 Third title 
300 Fourth title

The last entry in the list will extract until the end of the source video/audio"
      </default>
    </edit>
    <hbox>
      <button ok></button>
    </hbox>
</vbox>
</window>
' | gtkdialog -s --center &
}; export -f help

tag () {
BASENM=$(basename "${SOURCEFILE%.*}")
TAGS=$(echo -e "<window title=\"Edit Tags\">
<vbox>
  <text use-markup=\"true\" width-request=\"420\">
  <label>\"<b>The tags for track-number and title are automatically written</b>\"</label>
     </text>
  <text use-markup=\"true\" width-request=\"420\">
  <label>\"<b>Here you can edit tags for 'album' and 'artist'</b>   \"</label>
     </text>
<frame>
 <hbox>
  <text width-request=\"60\"><label>$(gettext 'Album: ')</label></text>
  <entry width-request=\"450\">
<variable>ALBUM</variable>
	<default>$BASENM</default>
</entry>
 </hbox>
</frame>

<frame>
 <hbox>
  <text width-request=\"60\"><label>$(gettext 'Artist: ')</label></text>
  <entry width-request=\"450\">
<variable>ARTIST</variable>
	<default>$BASENM</default>
</entry>
 </hbox>
</frame>

  <hbox>
    <button ok></button>
    <button cancel></button>
  </hbox>
</vbox>
</window>
" | gtkdialog -s --center)

if [ "`echo "$TAGS" | grep OK`" ]; then
export ALBUM=$(echo "$TAGS" | grep ALBUM= | sed 's/ALBUM=//;s/\"//g')
export ARTIST=$(echo "$TAGS" | grep ARTIST= | sed 's/ARTIST=//;s/\"//g')
fi
return
}; export -f tag

SPLIT=$(echo -e "<window title=\"Video/Audio splitter\">
<vbox>
    <hbox>
  <text use-markup=\"true\" width-request=\"500\">
  <label>\"<b>Split video or audio into chapters</b>   \"</label>
     </text>
    </hbox>
  <frame $(gettext 'Select video or audio file')>
    <hbox>
      <entry accept=\"file\" fs-folder=\"${HOME}\" fs-title=\"Select a video or audio file\">
      <variable>SOURCEFILE</variable>
      </entry>
      <button>
        <input file stock=\"gtk-open\"></input>
        <action type=\"fileselect\">SOURCEFILE</action>
      </button>
      <button>
          <input file stock=\"gtk-clear\"></input>
          <action>Clear:SOURCEFILE</action>
      </button>
    </hbox>
  </frame>
  <frame $(gettext 'Select a valid chapter list, click Help for info')>
    <hbox>
      <entry accept=\"file\" fs-folder=\"${HOME}\" fs-title=\"Select chapter list\">
      <variable>CHAPTERS</variable>
      </entry>
      <button>
        <input file stock=\"gtk-open\"></input>
        <action type=\"fileselect\">CHAPTERS</action>
      </button>
      <button>
          <input file stock=\"gtk-clear\"></input>
          <action>Clear:CHAPTERS</action>
      </button>
    </hbox>
  </frame>
  <frame $(gettext 'Output directory')>
    <hbox>
      <entry accept=\"directory\" fs-title=\"Select output directory\">
      <variable>DIR</variable>
     <default>$HOME</default>  
      </entry>
      <button>
        <input file stock=\"gtk-open\"></input>
        <action type=\"fileselect\">DIR</action>
      </button>
      <button>
          <input file stock=\"gtk-clear\"></input>
          <action>Clear:DIR</action>
      </button>
    </hbox>
  </frame>
  <hbox>
	<checkbox width-request=\"480\">
<label>\"Extract only audio from video into chapters\"</label>
<default>false</default>
<variable>ONLYAUDIO</variable>
<action>if true enable:ENTRY</action>
<action>if false disable:ENTRY</action>
</checkbox>
  </hbox>
 <hbox>
	<checkbox width-request=\"480\">
<label>\"Edit tags before extracting\"</label>
<default>false</default>
<variable>TAGGING</variable>
<action>if true enable:ENTRY</action>
<action>if false disable:ENTRY</action>
</checkbox>
  </hbox>
 <hbox>
	<checkbox width-request=\"480\">
<label>\"Overwrite existing files\"</label>
<default>false</default>
<variable>OW</variable>
<action>if true enable:ENTRY</action>
<action>if false disable:ENTRY</action>
</checkbox>
  </hbox>

  <hbox>
<button>
	<input file stock=\"gtk-help\"></input>
	<label>\"Help\"</label>
	<action>help</action>
</button>
<button>
       <input file stock=\"gtk-ok\"></input>
       <label>$(gettext 'Split')</label>
    <action>EXIT:split_chapters</action>
</button>
<button>
    <input file stock=\"gtk-quit\"></input>
    <label>$(gettext 'Quit')</label>
</button>
  </hbox>
</vbox>
</window>
" | gtkdialog -s --center)

if [ "`echo "$SPLIT" | grep EXIT | grep -v "exit\|abort" | grep split_chapters`" ]; then
export SOURCEFILE=$(echo "$SPLIT" | grep SOURCEFILE= | sed 's/SOURCEFILE=//;s/\"//g')
export CHAPTERS=$(echo "$SPLIT" | grep CHAPTERS= | sed 's/CHAPTERS=//;s/\"//g')
export DIR=$(echo "$SPLIT" | grep DIR= | sed 's/DIR=//;s/\"//g')
export ONLYAUDIO=$(echo "$SPLIT" | grep ONLYAUDIO= | sed 's/ONLYAUDIO=//;s/\"//g')
export TAGGING=$(echo "$SPLIT" | grep TAGGING= | sed 's/TAGGING=//;s/\"//g')
export OW=$(echo "$SPLIT" | grep OW= | sed 's/OW=//;s/\"//g')

split_chapters 
fi

