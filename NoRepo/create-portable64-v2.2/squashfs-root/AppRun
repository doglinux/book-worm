#!/bin/bash
#set -x
# create-appimage by fredx181, part of this program taken from "AppImageAssistant" by Simon Peter  (probono), known from http://portablelinuxapps.org/
# Very different method for 'Chroot Mode', the mounted appimage (in /tmp/.mount-xxxx) will be bind mounted at a new mountpoint together with '/' (filesystem) using unionfs-fuse.
# From there "chroot" into it and execute the command/program

export LAUNCHDIR="$(dirname "$(readlink -f "$0")")"
cd "$LAUNCHDIR"
export LD_LIBRARY_PATH="./usr/lib:./usr/lib/x86_64-linux-gnu/:./lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
export PATH="./usr/bin:./usr/sbin:$PATH"
yad --version
which yad
function info () {
echo -e '         *** About preparing a directory for creating an Appimage, or self-extracting script *** \n    Check the box:  '"'Create self-extracting script instead of appimage'"'  for the latter \n    Advantage of an AppImage is that it is mounted in /tmp, this way it does not take any space \n    In contrary to self-extracting script, which extracts the files in /tmp \n This program will create a script 'AppRun' (+ other requirements) in the chosen directory (<appdir-root>) \n - The directory should contain the executable, e.g abiword, and it must be in one of the directories in PATH \n (e.g. <appdir-root>/usr/bin, <appdir-root>/usr/sbin) \n - Also it should contain all required dependencies, e.g. libs, place them in <appdir-root>/usr/lib or <appdir-root>/usr/lib/i386-linux-gnu \n Place an icon e.g. <programname>.png in <appdir-root>/ or in <appdir-root>/usr/share/pixmaps/ \n For creating self-extracting script this is not needed \n Info only for DebianDog or XenialDog (has included apt2sfs): \n Besides creating the directory manually, you can also use a directory created by 'apt2sfs', \n just run apt2sfs, (cancel creating .squashfs) and choose '"'No'"' when prompted for removing the directory \n Or: unsquash an existing .sfs or .squashfs or .pet and use the extracted directory as base <appdir-root> \n Or: Select a .sfs or .squashfs instead of an AppDir \n \n       *** Chroot Mode: About how it works *** \n The way of portablizing is different from the method that is used by portablelinuxapps \n (http://portablelinuxapps.org/) \n Running the appimage will create a mountpoint (in /mnt/unionfs-xxxxxx) and by using unionfs-fuse the AppDir will be merged with the (also mounted) filesystem \n Then the command will be executed inside a chroot environment (jail)  \n The advantage is that there is more chance that the application will run properly, but the application start time is a little slower than when using the "Portablelinuxapps Mode"  \n Part of this program has been taken from "AppImageAssistant" by Simon Peter (probono), known from http://portablelinuxapps.org and https://github.com/AppImage/AppImageKit '  | yad --margins 7 --show-uri --title="Info about preparing a directory" --height=600 --width=790 --text-info --wrap --button="gtk-close:0"
}
export -f info

cr_appimage () {
if [ "$SELFEXTRACT" = "TRUE" ]; then
./makeself.sh --nomd5 --nocrc --nox11 "$APPDIR" "$(dirname "$APPDIR")/$NAME" "$NAME" ./AppRun 2>&1 | yad --title "Create Portable Self-extracting script (do not close until Done !)" --text " Creating Self-extracting portable script..." --text-info --wrap --tail --height 450 --width 600 --margins 4 --button="gtk-close:0"
[ -f "$SFS" ] && rm -rf "$APPDIR"
else
./package "$APPDIR" "$(dirname "$APPDIR")/$NAME" 2>&1 | yad --title "Create Portable AppImage (do not close until Done !)" --text " Creating AppImage..." --text-info --wrap --tail --height 450 --width 600 --margins 4 --button="gtk-close:0"
[ -f "$SFS" ] && rm -rf "$APPDIR"
fi 
}
export -f cr_appimage

# Gui at start.
LFONT="***<span size='large'> <b>  Create Portable AppImage v2.2 </b>  </span>***"
SETUP=`yad --image=AppImageAssistant.png --image-on-top --borders=6 --center --title="Create Portable AppImage" --width 670  --text=" $LFONT \n <b>Or self-extracting script</b>, check the box at the bottom \n <span foreground='dark blue'>Click 'Skip' to start creating AppImage or Self-extracting script directly \n (in case you already prepared the App directory)</span> \n Click 'Info' about preparing before running this program " \
--window-icon="preferences-system" --form --columns=1 \
--field="   Choose mode (Using Chroot mode the app runs slower, but may have advantage, see Info):   :LBL"  "" \
--field="                   \t\t\t\t:CB"  "Portablelinuxapps Mode!Chroot Mode" \
--field="   Select the directory to use as 'Appdir-root':  :LBL"  "" \
--field="                   \t\t\t\t:CDIR" "///Select AppDir >>>" \
--field="   <b>Or: Chroot Mode only</b> Select .sfs or .squashfs module (temporary directory will be created):  :LBL"  "" \
--field="                   \t\t\t\t:FL" "/" \
--field="   Type command to be executed, e.g:  abiword : :LBL" "" \
--field="                   : " "" \
--field="   <b>Optional:</b> Type custom name for the AppImage, \n   e.g:   Abiword-2.8, leave it empty for  '-portable' appended,      (e.g: abiword-portable) : :LBL" "" \
--field="              \t\t\t\t: " "" \
--field=" Create self-extracting script instead of appimage:CHK" "FALSE" \
 --button="Info:bash -c info" --button="Skip:2" --button="gtk-quit:1" --button="gtk-ok:0"`
ret=$?
export SELFEXTRACT="`echo $SETUP | cut -d "|" -f 11`"
case $ret in
0)
export MODE="`echo $SETUP | cut -d "|" -f 2`"
export APPDIR="`echo $SETUP | cut -d "|" -f 4`"
export SFS="`echo $SETUP | cut -d "|" -f 6`"
export COMMAND="`echo $SETUP | cut -d "|" -f 8`"
export NAME="`echo $SETUP | cut -d "|" -f 10 | sed 's| |_|g'`"

  if [ ! -f "$SFS" ]; then 
if [ ! -d "$APPDIR" ] || [ -z "$COMMAND" ]; then
yad --center --title="Create Portable AppImage" --text=" You probably did not fill in all fields, \n Please run again." --button="gtk-close:0"
exit 0
fi
  else
if [ -z "$COMMAND" ]; then
yad --center --title="Create Portable AppImage" --text=" You probably did not fill in all fields, \n Please run again." --button="gtk-close:0"
exit 0
fi
  fi

if [ -d "$APPDIR" ] && [ -f "$SFS" ]; then
yad --center --title="Create Portable AppImage" --text=" You cannot select appdir and sfs both, \n Please run again." --button="gtk-close:0"
exit 0
fi
if [ "$MODE" = "Portablelinuxapps Mode" ] && [ -f "$SFS" ]; then
yad --center --title="Create Portable AppImage" --text=" Using .sfs or .squashfs is only possible when selected 'Chroot Mode', \n Please run again." --button="gtk-close:0"
exit 0
fi


	if [ -z "$NAME" ]; then
	export NAME="${COMMAND}-portable"
	else
	export NAME="$NAME"
	fi

if [ -d "$APPDIR" ]; then
# Create <appication>.desktop in $APPDIR
echo '[Desktop Entry]
Version=1.0
Type=Application
Name='"$NAME"'
Comment=
Exec='"$COMMAND"'
Icon='"$COMMAND"'
Path=
Terminal=false
StartupNotify=false
' > "$APPDIR/${COMMAND}".desktop
fi

chroot_mode () {
if [ -d "$APPDIR" ]; then
mkdir -p "$APPDIR"/usr/bin 2> /dev/null
mkdir -p "$APPDIR"/usr/lib 2> /dev/null
mkdir -p "$APPDIR"/usr/share/pixmaps 2> /dev/null
cp -af opt/docs/AppRun_chroot.template "$APPDIR"/AppRun || RET=NOTOK
cp -af usr/bin/unionfs-fuse "$APPDIR"/usr/bin || RET=NOTOK 
cp -af abs2rel "$APPDIR"/ || RET=NOTOK
cp -af usr/bin/ReadMe-AppImage "$APPDIR"/ || RET=NOTOK
cp -a linux-user-chroot "$APPDIR"/
sed -i "s/export CMD=/export CMD=$COMMAND/g" "$APPDIR"/AppRun
elif [ -f "$SFS" ]; then
APPDIR="$(dirname "$SFS")/$COMMAND-$RANDOM"
mkdir -p  "$APPDIR"
# Create <appication>.desktop in $APPDIR
echo '[Desktop Entry]
Version=1.0
Type=Application
Name='"$NAME"'
Comment=
Exec='"$COMMAND"'
Icon='"$COMMAND"'
Path=
Terminal=false
StartupNotify=false
' > "$APPDIR/${COMMAND}".desktop
mkdir -p "$APPDIR"/usr/bin 2> /dev/null
cp -af usr/bin/unionfs-fuse "$APPDIR"/usr/bin || RET=NOTOK
cp -a "$SFS" $APPDIR
cp -af opt/docs/AppRun_chroot.template "$APPDIR"/AppRun || RET=NOTOK
cp -a linux-user-chroot "$APPDIR"/
cp -af usr/bin/ReadMe-AppImage "$APPDIR"/ || RET=NOTOK
sed -i "s/export CMD=/export CMD=$COMMAND/g" "$APPDIR"/AppRun
BASESFS="$(basename "$SFS")"
sed -i 's,SFS=,SFS="$LAUNCHDIR/'$BASESFS'",g' "$APPDIR"/AppRun
fi

  if [ "`whoami`" != "root" ]; then
echo "Checking if linux-user-chroot is installed..."
	if [ "$(stat -c %a "$(which linux-user-chroot)" 2> /dev/null)" = "6755" ] && [ "$(ls -ld "$(which linux-user-chroot)" | awk '{print $3}')" = "root" ]; then
	echo OK
	else
echo "Install linux-user-chroot ? (recommended)"
yad --center --title="Create Portable AppImage" --text=" Install 'linux-user-chroot' (20KB) ? \n Recommended when running an Appimage if logged in as regular user " --button="gtk-no:1" --button="gtk-yes:0"
ret=$?
case $ret in
0)
usr/bin/gsu-mod cp -a linux-user-chroot /usr/local/bin && sudo chown root:root /usr/local/bin/linux-user-chroot && sudo chmod 6755 /usr/local/bin/linux-user-chroot

;;
1|252)
:
;;
esac

echo "Checking linux-user-chroot permissions..."
permluc=$(stat -c %a "$(which linux-user-chroot)" 2> /dev/null)
ownluc=$(ls -ld "$(which linux-user-chroot)" | awk '{print $3}')
if [[ "$permluc" != "6755" ]] || [[ "$ownluc" != "root" ]]; then
echo "File permissions for linux-user-chroot needs to be 6755"
echo "Also it needs to be owned by root"
echo "See $APPDIR/ReadMe-AppImage for how to fix this"
LUCSTAT="not-ok"
else
echo OK
fi
	fi
  fi

ICON_=$(find "$APPDIR"/usr/share/icons "$APPDIR"/usr/share/pixmaps -name $COMMAND* -type f 2> /dev/null)
echo icon=$ICON_

if [ -z "$ICON_" ]; then 
cp -a opt/docs/.DirIcon "$APPDIR"/$COMMAND.png
cp -a opt/docs/.DirIcon "$APPDIR"/usr/share/pixmaps/$COMMAND.png
cp -a opt/docs/.DirIcon "$APPDIR"/
else
cp -a $(echo "$ICON_" | head -1) "$APPDIR"/.DirIcon
cp -a $(echo "$ICON_" | head -1) "$APPDIR"/$COMMAND.png
fi

#export PATH="$PWD:$PATH"
#echo $PATH
if [ ! -f "$APPDIR"/AppRun ]; then
yad --center --title="Create Portable AppImage" --text=" Some of the required files are not found in: \n $APPDIR \n Maybe you don't have write permission? \n Please fix and try again"  --button="gtk-close:0"
exit
else


	if [ "`whoami`" != "root" ] && [ "$LUCSTAT" = "not-ok" ]; then
yad --width 600 --center --title="Create Portable AppImage or self-extracting script" --text=" The App directory has been prepared, but NOTE: \n The binary 'linux-user-chroot' isn't installed or, \n doesn't have the right permissions or ownership \n See how to fix in \n $APPDIR/ReadMe-AppImage \n Before creating the AppImage or self-extracting script, you might want to test if the program runs well  \n To do so, run 'AppRun' from filemanager in: \n <b> $APPDIR </b> \n If you are satisfied, click Ok, and creation will start  \n (it will be created in the same directory as the AppDir) " --button="gtk-ok:0" --button="gtk-quit:1"
	else
yad --width 600 --center --title="Create Portable AppImage or self-extracting script" --text=" The App directory has been prepared \n Before creating the AppImage or self-extracting script, you might want to test if the program runs well  \n To do so, run 'AppRun' from filemanager in: \n <b> $APPDIR </b> \n If you are satisfied, click Ok, and creation will start  \n (it will be created in the same directory as the AppDir) " --button="gtk-ok:0" --button="gtk-quit:1"
	fi
ret=$?
	case $ret in
	0)
	export NAME=$(grep -m 1 -r Name= "$APPDIR"/*.desktop | cut -d "=" -f 2 | cut -d % -f 1 | sed 's| |_|g')

if [ -f "$(dirname "$APPDIR")/$NAME" ]; then
yad --center --title="Create Portable AppImage" --text=" "$(dirname "$APPDIR")/$NAME" already exists, \n     Replace it? " --button="gtk-no:1" --button="gtk-yes:0"
ret=$?
case $ret in
0)
	rm -f "$(dirname "$APPDIR")/$NAME"
cr_appimage
;;
1|252)
exitrequired
;;
esac
else
cr_appimage
fi
	;;
	1|252)
	exit
	;;
	esac
fi
}

portablelinuxapps_mode () {
mkdir -p "$APPDIR"/usr/bin 2> /dev/nullrequired
mkdir -p "$APPDIR"/usr/lib 2> /dev/null
mkdir -p "$APPDIR"/usr/share/pixmaps 2> /dev/null
mkdir -p "$APPDIR"/usr/share/icons 2> /dev/null
cp -af opt/docs/AppRun.template "$APPDIR"/AppRun || RET=NOTOK
cp -af abs2rel "$APPDIR"/ || RET=NOTOK
cp -af usr/bin/ReadMe-AppImage "$APPDIR"/ || RET=NOTOK
#sed -i "s/export CMD=/export CMD=$COMMAND/g" "$APPDIR"/AppRun


ICON_=$(find "$APPDIR"/usr/share/icons "$APPDIR"/usr/share/pixmaps -name ${COMMAND}* -type f 2> /dev/null)
echo icon=$ICON_

if [ -z "$ICON_" ]; then 
cp -a opt/docs/.DirIcon "$APPDIR"/$COMMAND.png
cp -a opt/docs/.DirIcon "$APPDIR"/usr/share/pixmaps/$COMMAND.png
cp -a opt/docs/.DirIcon "$APPDIR"/
else
cp -a $(echo "$ICON_" | head -1) "$APPDIR"/.DirIcon
cp -a $(echo "$ICON_" | head -1) "$APPDIR"/$COMMAND.png
fi

#export PATH="$PWD:$PATH"
#echo $PATH
if [ ! -f "$APPDIR"/AppRun ] || [ "$RET" = "NOTOK" ]; then
yad --center --title="Create Portable AppImage" --text=" Some of the required files are not found in: \n $APPDIR \n Maybe you don't have write permission? \n Please fix and try again"  --button="gtk-close:0"
exit
else

yad --width 600 --center --title="Create Portable AppImage or self-extracting script" --text=" The App directory has been prepared \n Before creating the AppImage or self-extracting script, you might want to test if the program runs well  \n To do so, run 'AppRun' from filemanager in: \n <b> $APPDIR </b> \n If you are satisfied, click Ok, and creation will start  \n (it will be created in the same directory as the AppDir) " --button="gtk-ok:0" --button="gtk-quit:1"

ret=$?
	case $ret in
	0)
	export NAME=$(grep -m 1 -r Name= "$APPDIR"/*.desktop | cut -d "=" -f 2 | cut -d % -f 1 | sed 's| |_|g')

if [ -f "$(dirname "$APPDIR")/$NAME" ]; then
yad --center --title="Create Portable AppImage" --text=" "$(dirname "$APPDIR")/$NAME" already exists, \n     Replace it? " --button="gtk-no:1" --button="gtk-yes:0"
ret=$?
case $ret in
0)
	rm -f "$(dirname "$APPDIR")/$NAME"
cr_appimage
;;
1|252)
exit
;;
esac
else
cr_appimage
fi
	;;
	1|252)
	exit
	;;
	esac
fi
}

if [ "$MODE" = "Chroot Mode" ]; then
chroot_mode
else
portablelinuxapps_mode
fi
;;
1|252)
exit
;;
2)
if [ "$SELFEXTRACT" = "TRUE" ]; then
APPDIR=$(yad --file --width 750 --height 600 --title "Select the App directory" --text " <b>Required files that should be inside the selected directory: AppRun, a .desktop file, </b> \n and the direcrories with binary and library files.")
else
APPDIR=$(yad --file --width 750 --height 600 --title "Select the App directory" --text " <b>Required files inside the selected directory: AppRun , a .desktop file , an icon </b>, e.g: name.png, name corresponding with 'Icon=...' entry in the .desktop file (the icon can also be in AppDir/usr/share/pixmaps)")
fi
ret=$?
[[ $ret -ne 0 ]] && exit
export APPDIR="$APPDIR"
COMMAND=$(grep -m 1 -r Exec= "$APPDIR"/*.desktop | cut -d "=" -f 2 | cut -d % -f 1)

	if [ ! -f "$APPDIR"/AppRun ]; then
yad --center --title="Create Portable AppImage" --text=" Some of the required files are not found in: \n $APPDIR \n Please fix and try again"  --button="gtk-close:0"
exit
	else

  if [ "`whoami`" != "root" ]; then
echo "Checking if linux-user-chroot is installed..."
	if [ "$(stat -c %a "$(which linux-user-chroot)" 2> /dev/null)" = "6755" ] && [ "$(ls -ld "$(which linux-user-chroot)" | awk '{print $3}')" = "root" ]; then
	echo OK
	else
echo "Install linux-user-chroot ? (recommended)"
yad --center --title="Create Portable AppImage" --text=" Install 'linux-user-chroot' (20KB) ? \n Recommended when running an Appimage if logged in as regular user " --button="gtk-no:1" --button="gtk-yes:0"
ret=$?
case $ret in
0)
usr/bin/gsu-mod cp -a linux-user-chroot /usr/local/bin && sudo chown root:root /usr/local/bin/linux-user-chroot && sudo chmod 6755 /usr/local/bin/linux-user-chroot

;;
1|252)
:
;;
esac

echo "Checking linux-user-chroot permissions..."
permluc=$(stat -c %a "$(which linux-user-chroot)" 2> /dev/null)
ownluc=$(ls -ld "$(which linux-user-chroot)" | awk '{print $3}')
if [[ "$permluc" != "6755" ]] || [[ "$ownluc" != "root" ]]; then
echo "File permissions for linux-user-chroot needs to be 6755"
echo "Also it needs to be owned by root"
echo "See $APPDIR/ReadMe-AppImage for how to fix this"
LUCSTAT="not-ok"
else
echo OK
fi
	fi
  fi

ICON_=$(find "$APPDIR"/usr/share/icons "$APPDIR"/usr/share/pixmaps -name ${COMMAND}* -type f 2> /dev/null)
if [ ! -f "$APPDIR"/${COMMAND}.png ] ||  [ -z "$ICON_" ]; then
cp -a opt/docs/.DirIcon "$APPDIR"/$COMMAND.png
cp -a opt/docs/.DirIcon "$APPDIR"/usr/share/pixmaps/$COMMAND.png
fi
export NAME=$(grep -m 1 -r Name= "$APPDIR"/*.desktop | cut -d "=" -f 2 | cut -d % -f 1 | sed 's| |_|g')

if [ -f "$(dirname "$APPDIR")/$NAME" ]; then
yad --center --title="Create Portable AppImage" --text=" "$(dirname "$APPDIR")/$NAME" already exists, \n      Replace it? " --button="gtk-no:1" --button="gtk-yes:0"
ret=$?
case $ret in
0)
rm -f "$(dirname "$APPDIR")/$NAME"
cr_appimage
;;
1|252)
exit
;;
esac
else
cr_appimage
fi
	fi
;;
esac

