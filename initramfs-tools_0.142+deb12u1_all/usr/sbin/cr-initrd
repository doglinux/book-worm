#!/bin/bash

# Not running from terminal ?
tty -s;
if [ $? -ne 0 ]; then
	msg=" Please run this script from terminal"
	xmessage "`echo -e $msg`"
	exit 0
fi

if [ "`whoami`" != "root" ]; then
echo "This script should be run as root"
echo "Please run again, e.g. 'sudo ./mkinitrd', exiting now..."
sleep 3
exit
fi

echo "Create porteus-boot initrd1.xz"
if [ -z "$1" ]; then
echo "Kernels found in /lib/modules:"

ls /lib/modules
read -p "Type kernel version : " kernel
else
kernel=$1
fi

export LMK="lib/modules/$kernel"
. /etc/cryptsetup-initramfs/conf-hook
if [ "$CRYPTSETUP" = "" ]; then
echo "CRYPTSETUP=y" >> /etc/cryptsetup-initramfs/conf-hook
fi
#echo f2fs >> /etc/initramfs-tools/modules
#echo "Generating initramfs for $kernel . . ."
rm -fr /var/tmp/mkinitramfs*
#mkinitramfs -k -o /dev/null $kernel

INITRAMFS=/tmp/initramfs-$RANDOM
mkdir $INITRAMFS
cp -a /usr/local/cr-initrd/initramfs/* $INITRAMFS

mknod $INITRAMFS/dev/console c 5 1
mknod $INITRAMFS/dev/null c 1 3
mknod $INITRAMFS/dev/ram0 b 1 0
mknod $INITRAMFS/dev/tty1 c 4 1
mknod $INITRAMFS/dev/tty2 c 4 2
mknod $INITRAMFS/dev/tty3 c 4 3
mknod $INITRAMFS/dev/tty4 c 4 4

#cp -a /var/tmp/mkinitramfs_*/lib/modules/* $INITRAMFS/lib/modules/

if [ -f /usr/share/nvidia/nvidia.ids ]; then
echo -n "copy nvidia.ids"
mkdir $INITRAMFS/usr/share/nvidia
cp /usr/share/nvidia/nvidia.ids $INITRAMFS/usr/share/nvidia/
cp /usr/share/nvidia/nvidia-legacy-390xx.ids $INITRAMFS/usr/share/nvidia/
#cp /usr/share/nvidia/nvidia-legacy-340xx.ids $INITRAMFS/usr/share/nvidia/
echo " - done"
fi

# copy file to initramfs tree, including
# all library dependencies (as shown by ldd)
# $1 = file to copy (full path)
copy_including_deps()
{
   # if source doesn't exist or target exists, do nothing
   if [ ! -e "$1" -o -e "$INITRAMFS"/"$1" ]; then
      return
   fi

   cp -R --parents "$1" "$INITRAMFS"
   if [ -L "$1" ]; then
      DIR="$(dirname "$1")"
      LNK="$(readlink "$1")"
      copy_including_deps "$(cd "$DIR"; realpath -s "$LNK")"
   fi

   ldd "$1" 2>/dev/null | sed -r "s/.*=>|[(].*//g" | sed -r "s/^\\s+|\\s+\$//" \
     | while read LIB; do
        copy_including_deps "$LIB"
     done

   for MOD in $(find "$1" -type f | grep .ko); do
      for DEP in $(cat /$LMK/modules.dep | fgrep /$(basename $MOD):); do
         copy_including_deps "/$LMK/$DEP"
      done
   done

   shift
   if [ "$1" != "" ]; then
       copy_including_deps "$@"
   fi
}
export -f copy_including_deps

copy_including_deps /$LMK/kernel/fs/aufs
copy_including_deps /$LMK/kernel/fs/overlayfs
copy_including_deps /$LMK/kernel/fs/exfat
copy_including_deps /$LMK/kernel/fs/ext2
copy_including_deps /$LMK/kernel/fs/ext3
copy_including_deps /$LMK/kernel/fs/ext4
copy_including_deps /$LMK/kernel/fs/fat
#copy_including_deps /$LMK/kernel/fs/nls
copy_including_deps /$LMK/kernel/fs/nls/nls_ascii.*
copy_including_deps /$LMK/kernel/fs/nls/nls_cp437.*
copy_including_deps /$LMK/kernel/fs/nls/nls_iso8859-1.*
copy_including_deps /$LMK/kernel/fs/nls/nls_utf8.*
copy_including_deps /$LMK/kernel/fs/fuse
copy_including_deps /$LMK/kernel/fs/isofs
copy_including_deps /$LMK/kernel/fs/ntfs
copy_including_deps /$LMK/kernel/fs/reiserfs
copy_including_deps /$LMK/kernel/fs/squashfs
copy_including_deps /$LMK/kernel/crypto
copy_including_deps /$LMK/kernel/fs/btrfs

# crc32c is needed for ext4, but I don't know which one, add them all, they are small
find /$LMK/kernel/ | grep crc32c | while read LINE; do
   copy_including_deps $LINE
done

#copy_including_deps /$LMK/kernel/drivers/staging/zsmalloc # needed by zram
#copy_including_deps /$LMK/kernel/drivers/block/zram
copy_including_deps /$LMK/kernel/drivers/block/loop.*

# usb drivers
copy_including_deps /$LMK/kernel/drivers/usb/storage/usb-storage.*
copy_including_deps /$LMK/kernel/drivers/usb/storage/uas.*
copy_including_deps /$LMK/kernel/drivers/usb/host
copy_including_deps /$LMK/kernel/drivers/usb/common
copy_including_deps /$LMK/kernel/drivers/usb/core
copy_including_deps /$LMK/kernel/drivers/hid/usbhid
copy_including_deps /$LMK/kernel/drivers/hid/hid.*
copy_including_deps /$LMK/kernel/drivers/hid/uhid.*
copy_including_deps /$LMK/kernel/drivers/hid/hid-generic.*

# disk and cdrom drivers
copy_including_deps /$LMK/kernel/drivers/cdrom
copy_including_deps /$LMK/kernel/drivers/scsi/sr_mod.*
copy_including_deps /$LMK/kernel/drivers/scsi/sd_mod.*
copy_including_deps /$LMK/kernel/drivers/scsi/scsi_mod.*
copy_including_deps /$LMK/kernel/drivers/scsi/sg.*
#copy_including_deps /$LMK/kernel/drivers/ata
copy_including_deps /$LMK/kernel/drivers/ata/ahci.*
copy_including_deps /$LMK/kernel/drivers/ata/ata_*.*
copy_including_deps /$LMK/kernel/drivers/ata/sata_*.*
copy_including_deps /$LMK/kernel/drivers/nvme/host/nvme.*
copy_including_deps /$LMK/kernel/drivers/mmc
copy_including_deps /$LMK/kernel/drivers/md/md-mod.*
copy_including_deps /$LMK/kernel/drivers/md/dm-crypt.*

copy_including_deps /$LMK/kernel/drivers/pci/controller/vmd.*

#copy_including_deps /$LMK/kernel/drivers/ata/pata_*.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_amd.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_atiixp.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_jmicron.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_marvell.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_mpiix.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_pcmcia.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_pata_sil680.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_pata_sis.*
copy_including_deps /$LMK/kernel/drivers/ata/pata_pata_via.*
copy_including_deps /$LMK/kernel/drivers/scsi/megaraid/megaraid_sas.*	# PE2950 PERC5i
copy_including_deps /$LMK/kernel/drivers/scsi/scsi_transport_sas.*	# PE2950 PERC5i
copy_including_deps /$LMK/kernel/drivers/scsi/megaraid/megaraid_mbox.*  # PE2850 PERC4e
copy_including_deps /$LMK/kernel/drivers/scsi/scsi_transport_srp.*	# PE2850 PERC4e
copy_including_deps /$LMK/kernel/drivers/message/fusion/mptspi.*	# PE2850 LSI 53c1030
copy_including_deps /$LMK/kernel/drivers/scsi/scsi_transport_spi.*	# PE2850 LSI 53c1030

# network support drivers
#if [ "$NETWORK" = "true" ]; then
   # add all known ethernet drivers
   copy_including_deps /$LMK/kernel/drivers/net/phy/broadcom.*
   copy_including_deps /$LMK/kernel/drivers/net/phy/realtek.*
   copy_including_deps /$LMK/kernel/drivers/net/ethernet
   copy_including_deps /$LMK/kernel/fs/nfs
#fi

# Copy all from modlist in initramfs directory
#while IFS= read line; do
#copy_including_deps "/${LMK}$line"
#done <<< "$(cat initramfs/modulelist)"

# copy all custom-built modules
copy_including_deps /$LMK/updates

copy_including_deps /$LMK/modules.*


find $INITRAMFS -name "*.ko.gz" -exec gunzip {} \;
find $INITRAMFS -name "*.ko.xz" -exec xz -d {} \;
find $INITRAMFS -name "*.ko.zst" -exec zstd -d {} \;

# trim modules.order file. Perhaps we could remove it entirely
MODULEORDER="$(cd "$INITRAMFS/$LMK/"; find -name "*.ko" | sed -r "s:^./::g" | tr "\n" "|" | sed -r "s:[.]:.:g")"
cat $INITRAMFS/$LMK/modules.order | sed -r "s/.ko.gz\$/.ko/" | grep -E "$MODULEORDER"/foo/bar > $INITRAMFS/$LMK/_
mv $INITRAMFS/$LMK/_ $INITRAMFS/$LMK/modules.order

depmod -b $INITRAMFS $kernel

mv -f $INITRAMFS/modlist $INITRAMFS/modlist.tmp 2> /dev/null

## Create modlist in $INITRAMFS (then modprobe only existing modules at boot, faster)
rm $INITRAMFS/modlist 2> /dev/null
for m in $(cat $INITRAMFS/modlist.tmp 2> /dev/null); do
modprobe -S $kernel -d $INITRAMFS -Dq $m | grep -v builtin > /dev/null 2> /dev/null
[ $? -eq 0 ] && echo -n "$m "  >> $INITRAMFS/modlist
done
rm $INITRAMFS/modlist.tmp

sleep 3

export BASE=$(cat /mnt/live/etc/homedrv)
if [ -z "$(ls "$BASE"/* 2> /dev/null)" ]; then # BASE possibly might not exist
export BASE=/mnt/live/$BASE
fi

VMLINUZ=$(readlink -f /vmlinuz)

if [ -e $VMLINUZ ]; then
mv -f $BASE/vmlinuz1 $BASE/vmlinuz1-$(uname -r)
echo "Old vmlinuz1 renamed to vmlinuz1-$(uname -r)"
cp -a $VMLINUZ $BASE/vmlinuz1
fi

mv -f $BASE/initrd1.xz $BASE/initrd1.xz-$(uname -r)
echo "Old initrd1.xz renamed to initrd1.xz-$(uname -r)"
cd $INITRAMFS
echo "Creating new initrd1.xz . . ."
find . -print | cpio -o -H newc 2>/dev/null | xz -f --extreme --check=crc32 > $BASE/initrd1.xz

#if [ -L /bin ] && [ -L /lib ]; then  # usr-merged system, initrd.img can be created 
#echo "Creating initrd.img . . ."
#mkinitramfs -c xz -k -o /tmp/initrd.img $kernel 2>/dev/null
#cd /var/tmp/mkinitramfs_*
#find . -print | cpio -o -H newc 2>/dev/null | xz -f --extreme --check=crc32 > /tmp/initrd.img
#rm -fr /var/tmp/mkinitramfs*
#echo "Done ! /tmp/initrd1.xz /tmp/initrd.img"
#else   # no initrd.img can be created
#echo "Could not create initrd.img on a 'non usr-merged' system, only initrd1.xz ..."

echo "Done ! New $BASE/initrd1.xz"
echo "And new $BASE/vmlinuz1"
echo "Reboot, with changes saved, to boot with the new kernel"

#fi

rm -fr $INITRAMFS






